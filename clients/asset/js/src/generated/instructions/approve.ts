/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  DelegateRole,
  DelegateRoleArgs,
  getDelegateRoleSerializer,
} from '../types';

// Accounts.
export type ApproveInstructionAccounts = {
  /** Asset account */
  asset: PublicKey | Pda;
  /** The holder of the asset */
  holder: Signer;
  /** The delegate account */
  delegate: PublicKey | Pda;
};

// Data.
export type ApproveInstructionData = {
  discriminator: number;
  args: Array<DelegateRole>;
};

export type ApproveInstructionDataArgs = { args: Array<DelegateRoleArgs> };

export function getApproveInstructionDataSerializer(): Serializer<
  ApproveInstructionDataArgs,
  ApproveInstructionData
> {
  return mapSerializer<ApproveInstructionDataArgs, any, ApproveInstructionData>(
    struct<ApproveInstructionData>(
      [
        ['discriminator', u8()],
        ['args', array(getDelegateRoleSerializer())],
      ],
      { description: 'ApproveInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 3 })
  ) as Serializer<ApproveInstructionDataArgs, ApproveInstructionData>;
}

// Args.
export type ApproveInstructionArgs = ApproveInstructionDataArgs;

// Instruction.
export function approve(
  context: Pick<Context, 'programs'>,
  input: ApproveInstructionAccounts & ApproveInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'asset',
    'AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73'
  );

  // Accounts.
  const resolvedAccounts = {
    asset: {
      index: 0,
      isWritable: true as boolean,
      value: input.asset ?? null,
    },
    holder: {
      index: 1,
      isWritable: false as boolean,
      value: input.holder ?? null,
    },
    delegate: {
      index: 2,
      isWritable: false as boolean,
      value: input.delegate ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ApproveInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getApproveInstructionDataSerializer().serialize(
    resolvedArgs as ApproveInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
